apply(surface_table, 2, function(x){sum(is.na(x))})
for (b in seq(1456572, max(surface_table$block_id), by = 1000)){
tmp <- surface_table[which(surface_table$block_id %in% seq(b, b + 999)), ] %>%
arrange(block_id, conc_r, conc_c)
write.csv(tmp, paste0("../data/output/malaria1/surface_split/surface_",b , ".csv"), row.names = FALSE)
}
for (b in seq(1456572, max(surface_table$block_id), by = 1000)){
tmp <- read.csv(paste0("../data/output/malaria1/surface_split/surface_",b , ".csv"), stringsAsFactors = FALSE)
tmp <- select(tmp, block_id, conc_r, conc_c)
print(b)
print(sum(duplicated(tmp)))
}
rm(list = ls())
files <- c("../../2020.12.17_NTNU_HTS_by_Toulo/data/output/surface.csv",
"../../2020.12.09_merge_my_dataset_change_drug_id/data/output/surface.csv",
"../../2020.12.09_merge_data_from_Toulo/data/output/malaria1/surface.csv",
"../../2020.12.09_merge_data_from_Toulo/data/output/covid/surface.csv",
"../../2020.12.09_merge_data_from_Toulo/data/output/ebola/surface.csv",
"../../2020.12.09_merge_data_from_Toulo/data/output/fallahi/surface.csv"
)
surface_table <- NULL
for (f in files){
tmp <- read.csv(f, stringsAsFactors = FALSE, header = TRUE)
if (ncol(tmp) == 1){
tmp <- read.table(f, sep = ";", stringsAsFactors = FALSE, header = TRUE)
}
surface_table <- rbind.data.frame(surface_table, tmp)
}
surface_table <- arrange(surface_table, block_id, conc_r, conc_c)
min(surface_table$block_id)
max(surface_table$block_id)
max(surface_table$block_id) - min(surface_table$block_id) + 1 == length(unique(surface_table$block_id))
table(table(surface_table$block_id))
apply(surface_table, 2, function(x){sum(is.na(x))})
surface_table <- read.csv("../data/output/surface.csv", stringsAsFactors = FALSE)
surface_table <- filter(surface_table, block_id > 1468171)
write.csv(surface_table, "../data/output/surface_1468172.csv", row.names = FALSE)
surface_table <- select(block_id, conc_c, conc_r)
surface_table <- select(surface_table, block_id, conc_c, conc_r)
sum(duplicated(surface_table))
setwd("~/Documents/work/SynergyFinder_shiny_app/SynergyFinder")
shiny::runApp()
runApp()
# Module UI function
library(shinydashboard)
dashboardUI <- dashboardPage(#skin = "black",
# dash board header
dashboardHeader(disable = TRUE),
# sidebar content
dashboardSidebar(
# custom css for buttons and sliderinput
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "allcss.css"),
tags$link(rel = "stylesheet", type = "text/css", href = "tooltip-curved.css"),
tags$link(rel = "stylesheet", type = "text/css", href = "drop.css"),
tags$script(src = "feedback_source.js"),
tags$script(src = "feedback.js"), #also to top button
tags$script(src = "tour.js")
),
# Menu elements
sidebarMenu(
id="menu1",
menuItem("Home", tabName = "tabHome"),
menuItem("Intro", tabName = "introTab"),
menuItem("User Guid", tabName = "userguidTab"),
menuItem("Upload Data", tabName = "inputdataTab"),
menuItem("Dose-response Map", tabName = "doseresponseTab"),
menuItem("Synergy Map", tabName = "synergyTab"),
menuItem("Download Report", tabName = "reportTab")
)
),
dashboardBody(class="DISABLED", id="body_d",
tags$style(".DISABLED { min-height: 100vh};"),
### changing theme
# shinyDashboardThemes(
#   theme = "grey_light"
# ),
# Custom theme ------------------------------------------------------------
uiChangeThemeOutput(),
# uiOutput(outputId='fillInput'),
# tags$head(tags$style(HTML('.alert-info,.bg-aqua,.callout.callout-info,.label-info,.modal-info .modal-body,
#                            .skin-blue .main-header .logo,.skin-blue .main-header .logo:hover,
#                            .skin-blue .main-header .navbar{background-image:linear-gradient(#54b4eb,#2fa4e7,#1d9ce5)}'))),
useToastr(),
shinyjs::useShinyjs(),
bsAlert("noPDdata"),
uiOutput(outputId='exData'),
uiOutput(outputId='errorTable'),
tabItems(
# Tab content -------------------------------------------------------------
tabItem(
tabName = "tabHome",
fluidRow(
column(
width = 12,
# Theme drop-down ---------------------------------------------------------
uiChangeThemeDropdown()
)
),
fluidRow(
column(
width = 6,
),
column(
width = 6,
# Theme drop-down ---------------------------------------------------------
uiChangeThemeDropdown()
)
)
),
tabItem(tabName = "introTab",
div(
br(),br(),br(),br(),br(),br(),br(),br(),br(),br(),br(),
fluidRow(column(offset = 3, width = 6,
div(
HTML('<div class="primary_header"><h1>SynergyFinder web application</h1><h2>an interactive tool for analyzing drug combination dose-response data </h2></div>'
),  br(),
HTML('<button type="button" id="buttonTour" class="btn btn-primary btn-lg">
<span class="glyphicon glyphicon-play"></span>
Start the tour
</button>'), id = "startour")
)), id = "wraptour")
),
tabItem(
tabName = "userguidTab",
div(
tags$p("How it works"),
br(),
# fluidRow(column(offset = 1, width = 10, HTML('<p align="center"><b>Video tutorial</b></p>'))),
# fluidRow(column(offset = 3, width = 6, HTML('<img onmouseover="" style="cursor: pointer;" onclick="javascript:openvideo()" src="vtt.png"></img>'))), hr(), br(),
# fluidRow(column(offset = 1, width = 10, HTML('<p align="center"><b>Technical documentation</b></p>'))),
# fluidRow(column(offset = 3, width = 6, HTML('<img onmouseover="" style="cursor: pointer;" onclick="javascript:techdoc()" src="manual.png"></img>'))),
# HTML('<object data="tech.pdf" type="application/pdf" width="100%" height="500"> alt : <a href="tech.pdf" download>tech.pdf</a></object>'),
HTML('<iframe src="https://player.vimeo.com/video/192242384" width="870" height="600" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>')
)
),
tabItem(
tabName = "inputdataTab",
# tags$h1("Upload Your Dataset"),
fluidPage(
fluidRow(
column(
width = 4,
tags$p("1. SynergyFinder accept three different file formats: CSV, XLSX, or TXT."),
div(id="annotfileid", uiOutput('resettableInput'),
HTML('<div id = "spanpop" class="tooltip-item"></div>')),
bsAlert("alertannotfile"),
),
column(
width = 4,
# HTML('
# <div id="tourfileformat" class="t-toggle-button">
#   <label class="t-toggle-button__option js-checked">
#     <input name="audience" value="designList" type="radio" checked="checked" id="paneltype_designer">
#     <span>Table</span>
#   </label>
#   <label class="t-toggle-button__option">
#     <input name="audience" value="devList" type="radio" id="panel-type_developer">
#     <span>Matrix</span>
#   </label>
# </div>
#      ')
tags$p("2. The drug combination data must be arrange in one of 2 formats: Table or Matrix."),
selectInput("inputDatatype", label = "Choose data format:", width = '100%',
choices = list("Table" = "Table", "Matrix" = "Matrix"),
selected = "Table")
),
column(
width = 4,
tags$p("3. The measurement for drug response be: inhibition or viability"),
selectInput("selectInhVia", label = "Choose readout:", width = '100%',
choices = list("","Inhibition" = "inhibition", "Viability" = "viability"),
selected = "")
),
),
fluidRow(
column(
width = 4,
tags$div(title="Move slider to visualize the drug combination dose-response data",
id = "toursliderdr",
switchButton(inputId = "Switch",
label = "Visualize dose-response data"))
),
column(
width = 4,
),
column(
width = 4,
tags$p("For more detail about input data, please check User Guid page.",
"Click the button below to download example files for testing purposes."),
downloadButton(outputId = "loadExData_small", label = "example data"))
),
hr()
)
), # tabItem - "inputTab"
tabItem(tabName = "doseresponseTab",
selectInput("correction", "Correction",
choices = list("Non" = "non", "Part" = "part", "All" = "all")),
hr(),
#when slider for PlotDoseresponse is on
conditionalPanel(
condition = "input.Switch == 1",
# dynamically create tabs with content
fluidRow(
box(width = 12, collapsible = F, id = "boxDose", solidHeader = !0,
column(10,
uiOutput(outputId='tabs')
),
column(2, br(),
box(width = 12.5, status = "info", collapsible = !0,
fluidRow(
column(10, offset = 1,
sliderInput(inputId = "height", label = "Height", min = 0, max = 1000, value = 500, step = 1))),
fluidRow(
column(10, offset = 1,
sliderInput(inputId = "width", label = "Width", min = 1, max = 13, value = 12, step = 1)))
),
box(id = "removeoutliers", width = 12.5, title = "Estimate missing responses or outliers", status = "info", collapsible = !0,
box(width = 12.5, title = "Choose concentration:",
fluidRow(column(12, uiOutput(outputId='increase1'))),
fluidRow(column(12, uiOutput(outputId='increase2'))),
fluidRow(column(10, offset = 2, actionButton("excludeconc", "Approx. conc.")))
)
)
)
)
)
),
tags$div(title="Calculate the synergy scores for drug combinations.", id = "tourcalcsyn",
switchButton(inputId = "Switch2",
label = "Calculate synergy")),
),
tabItem(tabName = "synergyTab",
# when slider for calcuate synergy is on
conditionalPanel(
condition = "input.Switch2 == 1",
div(selectInput("methods", "Method", choices = list("ZIP" = "ZIP", "Bliss" = "Bliss", "Loewe" = "Loewe", "HSA" = "HSA"), width = '40%'), id = "tourmodels"),
tags$div(title="Visualize the synergy scores for drug combinations as 2D or 3D interaction landscape over the dose-response matrix.", id = "tourvizsyn",
switchButton(inputId = "Switch4",
label = "Visualize synergy scores"))
),
hr(),
# when slider for plot synergy is on
conditionalPanel(
condition = "input.Switch4 == 1",
fluidRow(
box(width = 12, collapsible = F, id = "boxDose", solidHeader = !0, class = "heysyn",
fluidRow(uiOutput(outputId='tabs2')),
fluidRow( br(),
box(
width = 12, status = "info", solidHeader = !0, collapsible = !0, height = 770,
title = "Synergy Maps",
column(6,
tags$div(title="Brush and double-click to zoom",
plotOutput("plotsyn1", height = 600, dblclick = "plot7_dblclick", brush = brushOpts(id = "plotincrease_brush7",resetOnNew = !0))),
fluidRow(
column(4, downloadButton("download2Dsyn", label = "Download")),
tags$div(title="Show most synergistic area. \n on \n off",
column(4,
radioButtons("synarea", label = h4("Most synergistic area:"),
choices = list("ON" = 1, "OFF" = 0),
selected = 1, inline = !0)
)),
tags$div(title="Adjust 2D surface grid. \n grid on \n grid off",
column(4,
radioButtons("sizegridsyn", label = h4("Grid:"),
choices = list("ON" = 1, "OFF" = 0),
selected = 1, inline = !0)
)))
),
column(6,
fluidRow(
plotlyOutput("plotsyn2", height = 600)),
fluidRow(
column(4, downloadButton("download3Dsyn", label = "Download")),
tags$div(title="Adjust 3D surface grid. \n grid on \n grid off \n transparent grid",
column(5,offset = 3,
radioButtons("sizegridsyn2", label = h4("Grid:"),
choices = list("ON" = 1, "OFF" = 0, "transparent" = -1),
selected = 1, inline = !0)
)))
)
)
)
)
)
)
),
tabItem(tabName = "reportTab",
# tags$head(tags$style(HTML(".small-box {height: 105px}"))),
# valueBox(actionButton("Save_report", "Save!"), "Save full report", icon = icon("save", lib = "glyphicon"), width = 13),
# Save report
box(width = 12, collapsible = T,collapsed = T, id = "boxSave", solidHeader = !0, status = "info", title = "Static (pdf) report",
h6("In case of visualisation proplems use Adobe Reader"),
fluidRow(
column(width = 4,
selectInput("selectStatic2", "Dose response plot type", choices = list("all" = "all", "heatmap" = "heatmap", "curve" = "curve"), width = '97%')
),
column(width = 4,
selectInput("selectStatic", "Synergy plot type", choices = list("none" = "none", "all" = "all", "3D" = "3D", "2D" = "2D"), width = '97%')
),
column(3, offset = 1,
radioButtons("synareaRepStat", label = h4("Most synergistic area:"), choices = list("ON" = 1, "OFF" = 0),
selected = 1, inline = !0)
)
),
fluidRow(
column(12,
uiOutput(outputId='selectinputconprints')
)
),
downloadButton("downloadData2", label = "Download")
),
box(width = 12, collapsible = T, collapsed = T, id = "boxSave2", solidHeader = !0, status = "info", title = "Dynamic (pdf) report",
h6("In case of visualisation proplems use Adobe Reader"),
fluidRow(
column(width = 4,
selectInput("selectDynamic2", "Dose response plot type", choices = list("all" = "all", "heatmap" = "heatmap", "curve" = "curve"), width = '97%')
),
column(width = 4,
selectInput("selectDynamic", "Synergy plot type", choices = list("all" = "all", "3D" = "3D"), width = '97%')
),
column(3, offset = 1,
radioButtons("synareaRepDyn", label = h4("Most synergistic area:"), choices = list("ON" = 1, "OFF" = 0),
selected = 1, inline = !0)
)
),
fluidRow(
column(12,
uiOutput(outputId='selectinputconprintd')
)
),
downloadButton("downloadData", label = "Download")
),
box(width = 12, collapsible = T, collapsed = T, id = "boxSave3", solidHeader = !0, status = "info",
title = "Short (pdf) report (HeatMap + 2D Synergy plot)",
h6("In case of visualisation proplems use Adobe Reader"),
fluidRow(
column(12, uiOutput(outputId='selectinputconprintcomb'))),
fluidRow(
column(4,downloadButton("downloadData3", label = "Download")),
column(4, offset = 4,
radioButtons("synareaRep", label = h4("Most synergistic area:"), choices = list("ON" = 1, "OFF" = 0),
selected = 1, inline = !0)
)
)
),
box(width = 12, collapsible = T, collapsed = F, id = "boxSave4", title = "Synergy scores:",
fluidRow(column(12, offset = 0,
downloadButton("downloadSynscores1", label = "Download synergy scores(.xlsx)"),
downloadButton("downloadSynscores2", label = "Download synergy scores(.csv)"),
downloadButton("downloadSynscores3", label = "Download synergy scores(.txt)")#,
# HTML(paste0('<a download href="./synergy_scores.xlsx"><img src="xls.png" class = "marleft" alt="Smiley face" height="42" width="42"></a>
#              <a download href="./synergy_scores.csv"><img src="csv.png" class = "marleft" alt="Smiley face" height="42" width="42"></a>
#              <a download href="./synergy_scores.txt"><img src="txt.png" class = "marleft" alt="Smiley face" height="42" width="42"></a>'))
)))
)
),
HTML('<img src="werecommend.png" class="browsers_" alt="HTML5 Icon" width="124" height="65">')
#HTML('<footer style = "position:absolute!important;width:100%!important;bottom:0!important;left:50%!important">&copy; <script>document.write((new Date).getFullYear());</script>, FIMM</footer>')
)
)
runApp()
.rs.restartR()
runApp()
runApp()
shiny::runApp()
library(drc)
data("glymet")
force(glymet)
?confint.drc
data("mathews_screening_data")
data <- ReshapeData(mathews_screening_data)
response.mat <- data$dose.response.mats[[1]]
adjusted.mat <- CorrectBaseLine(response.mat, method = "part")
adjusted.mat
response.mat
90 + 5 - 90*5
shiny::runApp()
runApp()
#find all drug pairs
tabnames <- sapply(X = 1:nrow(drug.pairs),
FUN = function(i){paste0(drug.pairs$drug.col[i], " - ",
drug.pairs$drug.row[i])})
t <- apply(drug.pairs[, c("drug.col", "drug.row")], 2, paste, sep = " - ")
t
t <- apply(drug.pairs[, c("drug.col", "drug.row")], 1, paste, sep = " - ")
t
drug.pairs[, c("drug.col", "drug.row")]
t <- apply(drug.pairs[, c("drug.col", "drug.row")], 1, paste, collapse = " - ")
t
t
J <- length(tabnames)
pNames <- paste0("plot", LETTERS[1:J])
tabs <- lapply(X = 1:J, function(i){
tabPanel(tabnames[i],
h3(""),
fluidRow( width = input$width,
column(6,
tabsetPanel(
tabPanel(head(strsplit(tabnames[i],split=" ")[[1]],1),
plotOutput(pNames[i], height = input$height)),
tabPanel(tail(strsplit(tabnames[i],split=" ")[[1]],1),
plotOutput(paste0(pNames[i],"202"),
height = input$height)))
),
column(6,
plotOutput(paste0(pNames[i], "102"), height = input$height)
)
),
value=i)
})
tabs
curTab
shiny::runApp()
runApp()
data_
method
scores
scores_
scores$scores$dose.response.mats
pairs_ <- scores$scores$drug.pairs
pairs()
pairs_
?as.data.frame.list
runApp()
data_
scores_
i <- 1
tmp <- reshape2::acast(scores_[[i]])
tmp <- reshape2::acast(scores_[[i]])
tmp <- reshape2::melt(scores_[[i]])
tmp
tmp <- reshape2::melt(data_[[i]])
tmp
runApp()
runApp()
runApp()
scores_[1]
data_[1]
runApp()
PlotDoseResponseShinyDR <- compiler::cmpfun(function (param = "inhibition",
paramplot = 1, response.mat, unit.text, drug.row,
drug.col, drug.row.model = NULL, drug.col.model = NULL)
{
plot(0, type = "n", axes = !1, ann = !1)
if (paramplot == 1) {
data.plot <- melt(response.mat)
colnames(data.plot) <- c("y","x","Inhibition")
data.plot$Inhibition <- round(c(response.mat), 2)
data.plot$x <- as.factor(data.plot$x)
data.plot$y <- as.factor(data.plot$y)
axis.x.text <- round(as.numeric(colnames(response.mat)), 2)
axis.y.text <- round(as.numeric(rownames(response.mat)), 2)
dose.response.p <- ggplot(data.plot, aes_string(x = "x", y = "y")) + geom_tile(aes_string(fill = "Inhibition")) +
theme(title = element_text(face = "bold", size = 10)) +
geom_text(aes_string(fill = "Inhibition", label = "Inhibition"), size = 3.5) +
scale_fill_gradient2(low = "green", high = "red", midpoint = 0, name = paste0(param, " (%)")) +
scale_x_discrete(labels = axis.x.text) + scale_y_discrete(labels = axis.y.text) +
xlab(paste(drug.col, unit.text, sep = " ")) + ylab(paste(drug.row, unit.text, sep = " "))
dose.response.p <- dose.response.p + theme(axis.text.x = element_text(color = "red", face = "bold", size = 10))
dose.response.p <- dose.response.p + theme(axis.text.y = element_text(color = "red", face = "bold", size = 10))
dose.response.p <- dose.response.p + theme(axis.title = element_text(size = 10))
dose.response.p <- dose.response.p + ggtitle(paste0("\n\nDose-response matrix (", tolower(param), ")\n")) +
theme(plot.title = element_text(hjust = 0.5))
print(dose.response.p, newpage = F)
mtext(paste0(drug.col, "  &  ", drug.row, "      "), outer = !0, cex = 1.3, line = -1.5, col = "blue")
} else {
suppressWarnings(par(mgp = c(3, 0.5, 0))); par(mar = c(5.5, 5, 6.5, 2.5))
# if(paramplot == 2) {
#   plot(single.fitted$drug.row.model, xlab = paste0("Concentration ", unit.text), ylab = paste0(param, " (%)"), type = "obs", col = "red",  cex = 1.5, pch = 16, xtsty = "base5", ylim=c(-9,109))
#   plot(single.fitted$drug.row.model, xlab = paste0("Concentration ", unit.text), ylab = paste0(param, " (%)"), type = "none", cex = 1.5, add = T, lwd = 3, ylim=c(-9,109))
# } else {
#   plot(single.fitted$drug.col.model, xlab = paste0("Concentration ", unit.text), ylab = paste0(param, " (%)"), type = "obs", col = "red",  cex = 1.5, pch = 16, xtsty = "base5", ylim=c(-9,109))
#   plot(single.fitted$drug.col.model, xlab = paste0("Concentration ", unit.text), ylab = paste0(param, " (%)"), type = "none", cex = 1.5, add = T, lwd = 3, ylim=c(-9,109))
# }
if(paramplot == 2) {
plot(drug.row.model, xlab = paste0("Concentration ", unit.text),
ylab = paste0(param, " (%)"), type = "obs", col = "red",
cex = 1.5, pch = 16, xtsty = "base5", ylim=c(-9,109))
plot(drug.row.model, xlab = paste0("Concentration ", unit.text),
ylab = paste0(param, " (%)"), type = "none", cex = 1.5, add = T,
lwd = 3, ylim=c(-9,109))
} else {
plot(drug.col.model, xlab = paste0("Concentration ", unit.text),
ylab = paste0(param, " (%)"), type = "obs", col = "red",  cex = 1.5,
pch = 16, xtsty = "base5", ylim=c(-9,109))
plot(drug.col.model, xlab = paste0("Concentration ", unit.text),
ylab = paste0(param, " (%)"), type = "none", cex = 1.5, add = T,
lwd = 3, ylim=c(-9,109))
}
par(mar = c(0, 1, 9, 0))
title(paste0("Dose-response curve for drug: ", ifelse(paramplot == 2, drug.row, drug.col)),  cex.main = 1)
}
})
runApp()
runApp()
runApp()
runApp()
runApp()
source('~/Documents/work/SynergyFinder_shiny_app/SynergyFinder/CalcPlotSynergy.R')
runApp()
runApp()
source('~/Documents/work/SynergyFinder_shiny_app/SynergyFinder/CalcPlotSynergy.R')
runApp()
?sign
source('~/Documents/work/SynergyFinder_shiny_app/SynergyFinder/CalcPlotSynergy.R')
runApp()
?round
source('~/Documents/work/SynergyFinder_shiny_app/SynergyFinder/CalcPlotSynergy.R')
source('~/Documents/work/SynergyFinder_shiny_app/SynergyFinder/CalcPlotSynergy.R')
runApp()
